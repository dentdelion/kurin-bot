name: Build and Deploy Python Telegram Bot

on:
  push:
    branches:
      - main
    paths:
      - 'telegram-bot/**'
      - '.github/workflows/build-and-deploy-python.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod  # This tells GitHub Actions to use the "prod" environment

    steps:
      - name: Check Out Repo
        uses: actions/checkout@main

      - name: Set up Python 3.11
        uses: actions/setup-python@main
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd telegram-bot
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install test dependencies
        run: |
          cd telegram-bot
          pip install -r tests/requirements-test.txt

      - name: Run code quality checks
        run: |
          cd telegram-bot
          echo "üîç Running code quality checks..."
          # Run flake8 for linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è  Linting issues found (non-blocking)"
          # Run black for code formatting check
          black --check . || echo "‚ö†Ô∏è  Code formatting issues found (non-blocking)"

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@main
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        # Only build and push on main branch to avoid conflicts
        if: github.ref == 'refs/heads/main'
        env:
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          ADMIN_IDS: ${{ secrets.ADMIN_IDS }}
          GOOGLE_SHEETS_URL: ${{ vars.GOOGLE_SHEETS_URL }}
          GOOGLE_SHEET_NAME: ${{ vars.GOOGLE_SHEET_NAME }}
        run: |
          cd telegram-bot
          # Build the image
          docker compose -f docker-compose.yml build telegram-bot
          
          # Tag with commit SHA for versioning
          docker tag lancea18/kurin-bot:latest lancea18/kurin-bot:${{ github.sha }}
          
          # Push both tags
          docker push lancea18/kurin-bot:latest
          docker push lancea18/kurin-bot:${{ github.sha }}

      - name: Create .env file in project
        # Only deploy on main branch
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/kurin-bot/telegram-bot/
            
            # Create .env file with all necessary variables
            echo "# Bot configuration" > .env
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env
            echo "ADMIN_IDS=${{ vars.ADMIN_IDS }}" >> .env
            echo "" >> .env
            
            # Database configuration
            echo "# Database configuration" >> .env
            echo "DATABASE_URL=mysql+pymysql://${{ vars.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@mysql:3306/${{ vars.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "MYSQL_DATABASE=${{ vars.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_USER=${{ vars.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "" >> .env
            
            # Google Sheets configuration
            echo "# Google Sheets configuration" >> .env
            echo "GOOGLE_SHEETS_URL=${{ vars.GOOGLE_SHEETS_URL }}" >> .env
            echo "GOOGLE_SHEET_NAME=${{ vars.GOOGLE_SHEET_NAME }}" >> .env
            echo "GOOGLE_CREDENTIALS_FILE=/app/credentials/credentials.json" >> .env
            echo "" >> .env
            
            # Bot settings
            echo "# Bot settings" >> .env
            echo "ALLOWED_TIME_TO_READ_THE_BOOK=${{ vars.ALLOWED_TIME_TO_READ_THE_BOOK }}" >> .env
            echo "RULES_TEXT=${{ vars.RULES_TEXT }}" >> .env
            
            # Create credentials directory if it doesn't exist
            mkdir -p credentials
            
            # Write JSON credentials to separate file (safer approach)
            cat > credentials/credentials.json << 'CREDENTIALS_EOF'
            ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
            CREDENTIALS_EOF
            
            # Verify the JSON is valid
            python3 -m json.tool credentials/credentials.json > /dev/null && echo "‚úÖ JSON credentials are valid" || echo "‚ùå JSON credentials are invalid"

      - name: Deploy to server with database
        # Only deploy on main branch
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
            cd ~/kurin-bot
            git pull
            cd telegram-bot
            
            # Pull latest images
            docker compose -f docker-compose.yml pull
            
            # Stop existing services
            docker compose -f docker-compose.yml down
            
            # Remove any existing database containers and volumes if this is a fresh deployment
            # Uncomment the next line only for complete reset (WILL DELETE ALL DATA!)
            # docker compose -f docker-compose.yml down -v
            
            # Start services (MySQL first, then bot with automatic migration)
            echo "üöÄ Starting services with database migration..."
            docker compose -f docker-compose.yml up -d
            
            # Wait a moment for startup
            sleep 10
            
            # Check if services are running
            echo "üìä Service status:"
            docker compose -f docker-compose.yml ps
            
            # Check bot logs for successful migration
            echo "üîç Checking bot startup logs..."
            docker compose -f docker-compose.yml logs telegram-bot --tail=50
            
            # Check database connection
            echo "üîç Checking database status..."
            docker compose -f docker-compose.yml logs mysql --tail=20 