import logging
from telegram import Bot
import config

logger = logging.getLogger(__name__)

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def notify_admins_book_requested(self, book_info, user_info):
        """Notify admins that a book was requested for delivery"""
        message = (
            f"üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∫–Ω–∏–≥–∏</b>\n\n"
            f"üìö <b>–ö–Ω–∏–≥–∞:</b> {book_info['name']}\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book_info['author']}\n"
            f"üìñ <b>–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ:</b> {book_info['edition']}\n\n"
            f"üë®‚Äçüíº <b>–ó–∞–º–æ–≤–Ω–∏–∫:</b> {user_info['name']}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_info['phone']}\n\n"
            f"–ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –∫–Ω–∏–≥—É –Ω–∞ –ø–æ–ª–∏—Ü—é."
        )
        
        for admin_id in config.ADMIN_IDS:
            try:
                await self.bot.send_message(
                    chat_id=admin_id,
                    text=message,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Error sending notification to admin {admin_id}: {e}")
    
    async def notify_user_book_ready(self, user_id, book_info):
        """Notify user that book is ready for pickup"""
        message = (
            f"üìö <b>–ö–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞:</b> {book_info['name']}\n"
            f"<b>–ê–≤—Ç–æ—Ä:</b> {book_info['author']}\n\n"
            f"–ö–Ω–∏–≥–∞ –≤–∂–µ –Ω–∞ –ø–æ–ª–∏—Ü—ñ —ñ —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å! üìñ\n"
            f"–ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ü–µ –≤ –±–æ—Ç—ñ."
        )
        
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error sending notification to user {user_id}: {e}")
    
    async def notify_admins_book_picked_up(self, book_info, user_info):
        """Notify admins that book was picked up"""
        message = (
            f"‚úÖ <b>–ö–Ω–∏–≥–∞ –∑–∞–±—Ä–∞–Ω–∞</b>\n\n"
            f"üìö <b>–ö–Ω–∏–≥–∞:</b> {book_info['name']}\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book_info['author']}\n\n"
            f"üë®‚Äçüíº <b>–í–∑—è–≤:</b> {user_info['name']}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_info['phone']}\n\n"
            f"–ö–Ω–∏–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–∞ –¥–æ: {book_info.get('due_date', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        )
        
        for admin_id in config.ADMIN_IDS:
            try:
                await self.bot.send_message(
                    chat_id=admin_id,
                    text=message,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Error sending notification to admin {admin_id}: {e}")
    
    async def notify_user_book_overdue(self, user_id, book_info):
        """Notify user that book is overdue"""
        message = (
            f"‚è∞ <b>–ß–∞—Å –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∫–Ω–∏–≥—É!</b>\n\n"
            f"üìö <b>–ö–Ω–∏–≥–∞:</b> {book_info['name']}\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book_info['author']}\n\n"
            f"–¢–µ—Ä–º—ñ–Ω –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è: {book_info['due_date']}\n"
            f"–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –Ω–∞: {book_info['days_overdue']} –¥–Ω—ñ–≤\n\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å –∫–Ω–∏–≥—É —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ! üìñ"
        )
        
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error sending overdue notification to user {user_id}: {e}")
    
    async def notify_admins_book_returned(self, book_info, user_info, photo_id=None):
        """Notify admins that book was returned"""
        message = (
            f"üì§ <b>–ö–Ω–∏–≥–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–∞</b>\n\n"
            f"üìö <b>–ö–Ω–∏–≥–∞:</b> {book_info['name']}\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book_info['author']}\n\n"
            f"üë®‚Äçüíº <b>–ü–æ–≤–µ—Ä–Ω—É–≤:</b> {user_info['name']}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_info['phone']}\n\n"
            f"–ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –∫–Ω–∏–≥—É –∑ –ø–æ–ª–∏—Ü—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ó—ó —Å—Ç–∞–Ω."
        )
        
        for admin_id in config.ADMIN_IDS:
            try:
                if photo_id:
                    await self.bot.send_photo(
                        chat_id=admin_id,
                        photo=photo_id,
                        caption=message,
                        parse_mode='HTML'
                    )
                else:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"Error sending return notification to admin {admin_id}: {e}")
    
    async def send_rules_to_user(self, user_id):
        """Send library rules to user"""
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=config.RULES_TEXT,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error sending rules to user {user_id}: {e}") 