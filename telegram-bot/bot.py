import logging
import asyncio
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError
from datetime import datetime
import pandas as pd

import config
from google_sheets_manager import GoogleSheetsManager
from user_manager import UserManager
from notifications import NotificationManager
import keyboards

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class LibraryBot:
    def __init__(self):
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        try:
            self.sheets_manager = GoogleSheetsManager()
        except Exception as e:
            logger.error(f"Failed to initialize Google Sheets: {e}")
            raise
        
        self.user_manager = UserManager()
        self.notification_manager = NotificationManager(self.application.bot)
        
        # Register handlers
        self._register_handlers()
    
    def _register_handlers(self):
        """Register all command and callback handlers"""
        # Commands
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # Contact handler for phone number
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
        
        # Photo handler for book returns
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # Callback handlers
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user_id = update.effective_user.id
        
        if self.user_manager.is_user_registered(user_id):
            # User is registered, show main menu
            is_admin = str(user_id) in config.ADMIN_IDS
            await update.message.reply_text(
                "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
                reply_markup=keyboards.get_main_menu_keyboard(is_admin)
            )
        else:
            # Request registration
            await update.message.reply_text(
                "üëã –í—ñ—Ç–∞—î–º–æ –≤ –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ!\n\n"
                "–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
                reply_markup=keyboards.get_phone_keyboard()
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = (
            "üìö <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏</b>\n\n"
            "üîπ /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "üîπ /help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
            "<b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>\n"
            "1. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–Ω–∏–≥\n"
            "2. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
            "3. –ó–∞–±—Ä–æ–Ω—é–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–Ω–∏–≥—É\n"
            "4. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–æ–ª–∏—Ü—é\n"
            "5. –ó–∞–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤ –±–æ—Ç—ñ\n"
            "6. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –∫–Ω–∏–≥—É –≤—á–∞—Å–Ω–æ\n\n"
            "‚ùì –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"
        )
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle contact sharing for registration"""
        contact = update.message.contact
        user_id = update.effective_user.id
        
        # Register user
        self.user_manager.register_user(
            user_id=user_id,
            phone_number=contact.phone_number,
            first_name=contact.first_name,
            last_name=contact.last_name
        )
        
        # Show main menu
        is_admin = str(user_id) in config.ADMIN_IDS
        await update.message.reply_text(
            "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=keyboards.get_main_menu_keyboard(is_admin)
        )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle photo for book return"""
        user_id = update.effective_user.id
        
        if not self.user_manager.is_user_registered(user_id):
            await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start")
            return
        
        # Store photo for book return (this would be enhanced to track which book is being returned)
        photo = update.message.photo[-1]  # Get highest resolution
        
        # For now, just acknowledge receipt
        await update.message.reply_text(
            "üì∑ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ! –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏.\n\n"
            "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ '–ú–æ—ó –∫–Ω–∏–≥–∏' —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è."
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle all callback queries"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        # Check registration for non-admin callbacks
        if not data.startswith('admin_') and not self.user_manager.is_user_registered(user_id):
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start")
            return
        
        try:
            # Route callbacks
            if data == "browse_books":
                await self._handle_browse_books(query)
            elif data == "my_books":
                await self._handle_my_books(query)
            elif data == "back_to_main":
                await self._handle_back_to_main(query)
            elif data.startswith("category_"):
                await self._handle_category_selection(query, data)
            elif data.startswith("nav_"):
                await self._handle_navigation(query, data)
            elif data.startswith("book_select_"):
                await self._handle_book_selection(query, data)
            elif data.startswith("book_info_"):
                await self._handle_book_info(query, data)
            elif data.startswith("confirm_book_"):
                await self._handle_book_confirmation(query, data)
            elif data.startswith("admin_"):
                await self._handle_admin_callbacks(query, data)
            elif data == "user_picked_up":
                await self._handle_user_picked_up(query)
            elif data == "user_returned":
                await self._handle_user_returned(query)
            elif data == "confirm_return":
                await self._handle_confirm_return(query)
            elif data == "back_to_books":
                await self._handle_back_to_books(query)
        except Exception as e:
            logger.error(f"Error handling callback {data}: {e}")
            await query.edit_message_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. "
                "–ú–æ–∂–ª–∏–≤–æ, –ø—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ Google Sheets. "
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    
    async def _handle_browse_books(self, query):
        """Handle browse books callback"""
        await query.edit_message_text(
            "üìö –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–Ω–∏–≥:",
            reply_markup=keyboards.get_categories_keyboard()
        )
    
    async def _handle_my_books(self, query):
        """Handle my books callback"""
        user_id = query.from_user.id
        
        try:
            active_books = self.user_manager.get_user_active_books(user_id)
            
            if active_books:
                text = "üìñ <b>–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–∏–≥–∏:</b>\n\n"
                
                # Check if any books are ready for pickup by looking at Google Sheets status
                ready_for_pickup = []
                for book in active_books:
                    book_id = book['book_id']
                    book_name = self._get_book_name_by_id(book_id)
                    if not book_name:
                        book_name = f"–ö–Ω–∏–≥–∞ ID: {book_id}"
                    
                    # Check if book has due date set (means it's been picked up)
                    has_due_date = book['expiry_date'] and book['date_booked']
                    days_since_booking = (datetime.now() - book['date_booked']).days
                    
                    # If book was booked recently and no due date properly set, it might be ready for pickup
                    book_status = ""
                    if book['days_left'] <= 0:
                        book_status = "‚è∞ –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ"
                    elif days_since_booking <= 2 and book['expiry_date']:
                        # Check if book is delivered but not picked up
                        try:
                            df = self.sheets_manager.read_books()
                            book_row = df[df[config.EXCEL_COLUMNS['id']].astype(str) == str(book_id)]
                            if not book_row.empty:
                                row = book_row.iloc[0]
                                booked_until = row[config.EXCEL_COLUMNS['booked_until']]
                                status = row[config.EXCEL_COLUMNS['status']]
                                
                                # If status is 'booked' but no due date, book is ready for pickup
                                if (str(status).lower() == config.STATUS_VALUES['BOOKED'] and 
                                    (pd.isna(booked_until) or str(booked_until).strip() == '')):
                                    book_status = "üì¶ –ì–æ—Ç–æ–≤–∞ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è!"
                                    ready_for_pickup.append(book_id)
                                else:
                                    book_status = f"üìÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: {book['days_left']}"
                            else:
                                book_status = f"üìÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: {book['days_left']}"
                        except Exception as e:
                            logger.error(f"Error checking book status for {book_id}: {e}")
                            book_status = f"üìÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: {book['days_left']}"
                    else:
                        book_status = f"üìÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: {book['days_left']}"
                    
                    text += f"üìö <b>{book_name}</b>\n"
                    text += f"üóì –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ: {book['date_booked'].strftime('%d.%m.%Y')}\n"
                    text += f"üìÖ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ: {book['expiry_date'].strftime('%d.%m.%Y')}\n"
                    text += f"{book_status}\n\n"
                
                # Add special message if books are ready for pickup
                if ready_for_pickup:
                    text += "üí° <b>–£–≤–∞–≥–∞:</b> –£ –≤–∞—Å —î –∫–Ω–∏–≥–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –ó–∞–±—Ä–∞–≤ –∫–Ω–∏–≥—É' –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∑–∞–±–µ—Ä–µ—Ç–µ —ó—Ö –∑ –ø–æ–ª–∏—Ü—ñ.\n\n"
                    
            else:
                text = "üìñ <b>–í–∞—à—ñ –∫–Ω–∏–≥–∏</b>\n\n –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–∏–≥"
            
            await query.edit_message_text(
                text,
                reply_markup=keyboards.get_user_book_actions_keyboard(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error getting user books: {e}")
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∞—à—ñ –∫–Ω–∏–≥–∏",
                reply_markup=keyboards.get_user_book_actions_keyboard()
            )
    
    async def _handle_back_to_main(self, query):
        """Handle back to main menu"""
        user_id = query.from_user.id
        is_admin = str(user_id) in config.ADMIN_IDS
        
        await query.edit_message_text(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            reply_markup=keyboards.get_main_menu_keyboard(is_admin)
        )
    
    async def _handle_category_selection(self, query, data):
        """Handle category selection"""
        category = data.replace("category_", "")
        user_id = query.from_user.id
        
        # Get books for this category
        books, total_books = self.sheets_manager.get_books_by_category(category, page=0)
        
        if not books:
            await query.edit_message_text(
                f"üìö –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n\n"
                "–ö–Ω–∏–≥ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î.",
                reply_markup=keyboards.get_categories_keyboard()
            )
            return
        
        # Format books list
        books_text = self._format_books_list(books, category, 0, total_books)
        total_pages = (total_books + config.BOOKS_PER_PAGE - 1) // config.BOOKS_PER_PAGE
        
        await query.edit_message_text(
            books_text,
            reply_markup=keyboards.get_books_navigation_keyboard(0, total_pages, category, books),
            parse_mode='HTML'
        )
    
    async def _handle_navigation(self, query, data):
        """Handle pagination navigation"""
        parts = data.split("_")
        direction = parts[1]  # prev or next
        category = parts[2]
        page = int(parts[3])
        
        user_id = query.from_user.id
        
        books, total_books = self.sheets_manager.get_books_by_category(category, page)
        books_text = self._format_books_list(books, category, page, total_books)
        total_pages = (total_books + config.BOOKS_PER_PAGE - 1) // config.BOOKS_PER_PAGE
        
        await query.edit_message_text(
            books_text,
            reply_markup=keyboards.get_books_navigation_keyboard(page, total_pages, category, books),
            parse_mode='HTML'
        )
    
    async def _handle_book_selection(self, query, data):
        """Handle book selection for booking"""
        book_index = int(data.replace("book_select_", ""))
        book = self.sheets_manager.get_book_by_index(book_index)
        
        if not book:
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if not book['is_available']:
            await query.edit_message_text("‚ùå –¶—è –∫–Ω–∏–≥–∞ –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞.")
            return
        
        # Show booking confirmation
        book_text = (
            f"üìö <b>{book['name']}</b>\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book['author']}\n"
            f"üìñ <b>–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ:</b> {book['edition']}\n\n"
            "–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Ü—é –∫–Ω–∏–≥—É?\n\n"
            "‚ö†Ô∏è –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–Ω–∏–≥–∞ –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∏—Ü—é –ø—Ä–æ—Ç—è–≥–æ–º 1-2 –¥–Ω—ñ–≤."
        )
        
        await query.edit_message_text(
            book_text,
            reply_markup=keyboards.get_booking_confirmation_keyboard(book_index),
            parse_mode='HTML'
        )
    
    async def _handle_book_info(self, query, data):
        """Handle book info request"""
        book_index = int(data.replace("book_info_", ""))
        book = self.sheets_manager.get_book_by_index(book_index)
        
        if not book:
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if book['is_available'] else "‚ùå –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞"
        
        book_text = (
            f"üìö <b>{book['name']}</b>\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book['author']}\n"
            f"üìñ <b>–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ:</b> {book['edition']}\n"
            f"üìÑ <b>–°—Ç–æ—Ä—ñ–Ω–æ–∫:</b> {book['pages']}\n"
            f"üìã <b>–û–ø–∏—Å:</b> {book['description']}\n"
            f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b> {book['categories']}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
        )
        
        await query.edit_message_text(
            book_text,
            reply_markup=keyboards.get_book_actions_keyboard(book_index, book['is_available']),
            parse_mode='HTML'
        )
    
    async def _handle_book_confirmation(self, query, data):
        """Handle book booking confirmation"""
        book_index = int(data.replace("confirm_book_", ""))
        user_id = query.from_user.id
        
        # Get book and user info
        book = self.sheets_manager.get_book_by_index(book_index)
        user = self.user_manager.get_user(user_id)
        
        if not book or not book['is_available']:
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
            return
        
        # Book the item
        user_name = self.user_manager.get_user_display_name(user_id)
        try:
            self.sheets_manager.book_item(book_index, user_id, user_name)
            
            # Add to database statistics using book_id instead of book_name
            book_id = book['id']  # Use the book ID from the sheet
            self.user_manager.add_book_to_statistics(user_id, book_id)
            
            # Send notifications to admins - get user info safely
            book_info = {
                'name': book['name'],
                'author': book['author'],
                'edition': book['edition']
            }
            
            # Get phone number safely
            phone_number = "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
            if user and 'phone_number' in user:
                phone_number = user['phone_number']
            
            user_info = {
                'name': user_name,
                'phone': phone_number
            }
            
            await self.notification_manager.notify_admins_book_requested(book_info, user_info)
            
            # Send rules to user
            await self.notification_manager.send_rules_to_user(user_id)
            
            logger.info(f"Book {book_index} successfully booked by user {user_id} ({user_name}), admin notifications sent")
            
            await query.edit_message_text(
                f"‚úÖ –ö–Ω–∏–≥–∞ '{book['name']}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞!\n\n"
                "üìã –ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n"
                "üì¶ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É.\n"
                "‚è∞ –û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∫–Ω–∏–≥–∏ (1-2 –¥–Ω—ñ)."
            )
        except Exception as e:
            logger.error(f"Failed to book item: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ –∫–Ω–∏–≥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    async def _handle_admin_callbacks(self, query, data):
        """Handle admin panel callbacks"""
        user_id = query.from_user.id
        
        if str(user_id) not in config.ADMIN_IDS:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        try:
            if data == "admin_panel":
                await self._handle_admin_panel(query)
            elif data == "admin_delivery_queue":
                await self._handle_admin_delivery_queue(query)
            elif data == "admin_mark_delivered":
                await self._handle_admin_mark_delivered(query)
            elif data == "admin_confirm_returns":
                await self._handle_admin_confirm_returns(query)
            elif data == "admin_statistics":
                await self._handle_admin_statistics(query)
            elif data.startswith("admin_deliver_"):
                await self._handle_admin_deliver_book(query, data)
            elif data.startswith("admin_delivered_"):
                await self._handle_admin_book_delivered(query, data)
            elif data.startswith("admin_confirm_return_"):
                await self._handle_admin_confirm_return(query, data)
            elif data.startswith("admin_confirmed_return_"):
                await self._handle_admin_confirmed_return(query, data)
        except Exception as e:
            logger.error(f"Error in admin callback {data}: {e}")
            await query.edit_message_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö. "
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
    
    async def _handle_admin_panel(self, query):
        """Handle admin panel main menu"""
        await query.edit_message_text(
            "üîß –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å",
            reply_markup=keyboards.get_admin_panel_keyboard()
        )
    
    async def _handle_admin_delivery_queue(self, query):
        """Handle admin delivery queue request"""
        user_id = query.from_user.id
        books = self.sheets_manager.get_books_for_delivery()
        logger.info(f"Admin {user_id} requested delivery queue, found {len(books)} books")
        
        if books:
            await query.edit_message_text(
                f"üì¶ –ö–Ω–∏–≥–∏ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏ ({len(books)}):",
                reply_markup=keyboards.get_delivery_books_keyboard(books)
            )
        else:
            # Show debug information if no books are found
            debug_text = await self._get_delivery_debug_info("üì¶ –ù–µ–º–∞—î –∫–Ω–∏–≥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏")
            await query.edit_message_text(
                debug_text,
                reply_markup=keyboards.get_admin_panel_keyboard()
            )
    
    async def _handle_admin_mark_delivered(self, query):
        """Handle admin mark delivered request"""
        user_id = query.from_user.id
        books = self.sheets_manager.get_books_for_delivery()
        logger.info(f"Admin {user_id} requested mark delivered, found {len(books)} books")
        
        if books:
            await query.edit_message_text(
                f"üìö –û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ ({len(books)}):",
                reply_markup=keyboards.get_delivery_books_keyboard(books)
            )
        else:
            # Show debug information if no books are found
            debug_text = await self._get_delivery_debug_info("üìö –ù–µ–º–∞—î –∫–Ω–∏–≥ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            await query.edit_message_text(
                debug_text,
                reply_markup=keyboards.get_admin_panel_keyboard()
            )
    
    async def _handle_admin_deliver_book(self, query, data):
        """Handle admin book delivery confirmation request"""
        book_index = int(data.replace("admin_deliver_", ""))
        book = self.sheets_manager.get_book_by_index(book_index)
        
        if book:
            await query.edit_message_text(
                f"üìö {book['name']}\nüë§ {book['author']}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –ø–æ–ª–∏—Ü—é?",
                reply_markup=keyboards.get_admin_delivery_actions_keyboard(book_index)
            )
        else:
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    
    async def _handle_admin_book_delivered(self, query, data):
        """Handle admin book delivered confirmation"""
        book_index = int(data.replace("admin_delivered_", ""))
        
        try:
            # Get book info before marking as delivered
            book = self.sheets_manager.get_book_by_index(book_index)
            if not book:
                await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            logger.info(f"Admin marking book as delivered: index={book_index}, book_id={book['id']}, name={book['name']}")
            
            # Mark as delivered in sheets
            self.sheets_manager.mark_as_delivered(book_index)
            
            # Find the user who booked this book
            book_id = book['id']
            logger.info(f"Looking for user with active book_id: {book_id}")
            user_info = self.user_manager.get_user_with_active_book(book_id)
            
            if user_info:
                logger.info(f"Found user for book delivery: user_id={user_info['user_id']}, user_name={user_info['user_name']}")
                
                # Prepare book info for notification
                book_info = {
                    'name': book['name'],
                    'author': book['author']
                }
                
                # Send notification to user
                try:
                    await self.notification_manager.notify_user_book_ready(user_info['user_id'], book_info)
                    logger.info(f"‚úÖ Successfully sent book ready notification to user {user_info['user_id']} for book {book['name']}")
                except Exception as notify_error:
                    logger.error(f"‚ùå Failed to send notification to user {user_info['user_id']}: {notify_error}")
                    # Continue with the admin response even if notification fails
                
                await query.edit_message_text(
                    f"‚úÖ –ö–Ω–∏–≥–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∏—Ü—é!\n\n"
                    f"üìö {book['name']}\n"
                    f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_info['user_name']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∫–Ω–∏–≥–∏."
                )
            else:
                logger.warning(f"‚ùå No active booking found for book_id: {book_id}, book_name: {book['name']}")
                
                # Let's also check all active bookings to help debug
                try:
                    # Debug: Check what active bookings exist
                    debug_info = []
                    with self.user_manager.db_manager.get_session() as session:
                        from database import UserStatistics, User
                        active_bookings = session.query(UserStatistics, User).join(User).filter(
                            UserStatistics.returned == False
                        ).all()
                        
                        for stat, user in active_bookings:
                            debug_info.append(f"user_id={user.telegram_id}, book_id={stat.book_id}")
                    
                    logger.info(f"Current active bookings: {debug_info}")
                except Exception as debug_e:
                    logger.error(f"Error getting debug info: {debug_e}")
                
                # No active booking found
                await query.edit_message_text(
                    f"‚úÖ –ö–Ω–∏–≥–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∏—Ü—é!\n\n"
                    f"üìö {book['name']}\n"
                    f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –∫–Ω–∏–≥–∏.\n"
                    f"Book ID: {book_id} (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π)"
                )
                
        except Exception as e:
            logger.error(f"Failed to mark book as delivered: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –∫–Ω–∏–≥–∏ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ—ó.")
    
    async def _handle_admin_statistics(self, query):
        """Handle admin statistics request"""
        try:
            top_books = self.user_manager.get_top_books_last_month(10)
            
            if top_books:
                text = "üìä <b>–¢–æ–ø-10 –Ω–∞–π–º–µ–Ω—à –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∫–Ω–∏–≥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å</b>\n\n"
                for i, book in enumerate(top_books, 1):
                    # Get book name from sheets using book_id
                    book_name = self._get_book_name_by_id(book['book_id'])
                    if not book_name:
                        book_name = f"–ö–Ω–∏–≥–∞ ID: {book['book_id']}"
                    
                    text += f"{i}. <b>{book_name}</b>\n"
                    text += f"   üìà –ó–∞–±—Ä–æ–Ω—é–≤–∞–Ω—å: {book['booking_count']}\n\n"
            else:
                text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å</b>\n\n‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å"
            
            await query.edit_message_text(
                text,
                reply_markup=keyboards.get_admin_panel_keyboard(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error getting admin statistics: {e}")
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=keyboards.get_admin_panel_keyboard()
            )
    
    async def _handle_admin_confirm_returns(self, query):
        """Handle admin confirm returns request"""
        user_id = query.from_user.id
        books = self.sheets_manager.get_returned_books_pending_confirmation()
        logger.info(f"Admin {user_id} requested returned books, found {len(books)} books")
        
        if books:
            await query.edit_message_text(
                f"üîÑ –ö–Ω–∏–≥–∏ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è ({len(books)}):",
                reply_markup=keyboards.get_returned_books_keyboard(books)
            )
        else:
            await query.edit_message_text(
                "üîÑ –ù–µ–º–∞—î –∫–Ω–∏–≥, —â–æ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                reply_markup=keyboards.get_admin_panel_keyboard()
            )
    
    async def _handle_admin_confirm_return(self, query, data):
        """Handle admin book return confirmation request"""
        book_index = int(data.replace("admin_confirm_return_", ""))
        book = self.sheets_manager.get_book_by_index(book_index)
        
        if book:
            await query.edit_message_text(
                f"üìö <b>{book['name']}</b>\n"
                f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book['author']}\n"
                f"üìñ <b>–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ:</b> {book['edition']}\n"
                f"üìÖ <b>–ë—É–ª–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –¥–æ:</b> {book['booked_until']}\n\n"
                "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏?\n"
                "–¶–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ñ –∑–∞–±–∞—Ä–≤–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞.",
                reply_markup=keyboards.get_return_confirmation_keyboard(book_index),
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    
    async def _handle_admin_confirmed_return(self, query, data):
        """Handle admin book return confirmation"""
        book_index = int(data.replace("admin_confirmed_return_", ""))
        
        try:
            # Get book info before clearing
            book = self.sheets_manager.get_book_by_index(book_index)
            book_name = f"{book['name']} - {book['author']}" if book else "Unknown book"
            
            # Confirm return in sheets (clears status and color)
            self.sheets_manager.confirm_book_return(book_index)
            
            # Also mark as returned in database if user exists
            # Note: This requires enhancing to track which user had the book
            # For now, we'll just log the return
            logger.info(f"Book {book_index} ({book_name}) return confirmed by admin")
            
            await query.edit_message_text(
                f"‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
                f"üìö {book_name}\n\n"
                "–°—Ç–∞—Ç—É—Å –æ—á–∏—â–µ–Ω–æ, –∑–∞–±–∞—Ä–≤–ª–µ–Ω–Ω—è –∑–Ω—è—Ç–æ."
            )
        except Exception as e:
            logger.error(f"Failed to confirm book return: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏.")
    
    async def _get_delivery_debug_info(self, base_message):
        """Get debug information for delivery queue"""
        try:
            df = self.sheets_manager.read_books()
            if not df.empty:
                total_books = len(df)
                booked_count = len(df[df[config.EXCEL_COLUMNS['status']].astype(str).str.lower() == config.STATUS_VALUES['BOOKED']])
                debug_text = (
                    f"{base_message}\n\n"
                    f"üîç –í—ñ–¥–ª–∞–¥–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n"
                    f"–í—Å—å–æ–≥–æ –∫–Ω–∏–≥ –≤ —Ç–∞–±–ª–∏—Ü—ñ: {total_books}\n"
                    f"–ö–Ω–∏–≥ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'booked': {booked_count}\n\n"
                    f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î –∫–Ω–∏–≥–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'booked' –≤ –∫–æ–ª–æ–Ω—Ü—ñ 'Status'"
                )
            else:
                debug_text = f"{base_message}\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ"
        except Exception as debug_e:
            logger.error(f"Debug info error: {debug_e}")
            debug_text = f"{base_message}\n\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ª–∞–¥–æ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {debug_e}"
        
        return debug_text
    
    async def _handle_user_picked_up(self, query):
        """Handle user picked up book"""
        user_id = query.from_user.id
        
        try:
            # Get user's active books
            active_books = self.user_manager.get_user_active_books(user_id)
            
            if not active_books:
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–∏–≥ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è.",
                    reply_markup=keyboards.get_user_book_actions_keyboard()
                )
                return
            
            # For now, handle the first active book (in future versions, let user choose)
            book = active_books[0]
            book_id = book['book_id']
            
            # Get book name for display
            book_name = self._get_book_name_by_id(book_id)
            if not book_name:
                book_name = f"–ö–Ω–∏–≥–∞ ID: {book_id}"
            
            # Find the book in Google Sheets to mark as picked up
            try:
                # Get book index in sheets by book_id
                df = self.sheets_manager.read_books()
                book_row = df[df[config.EXCEL_COLUMNS['id']].astype(str) == str(book_id)]
                
                if not book_row.empty:
                    book_index = book_row.index[0]
                    
                    # Mark as picked up in Google Sheets (set due date)
                    self.sheets_manager.mark_as_picked_up(book_index, user_id)
                    
                    # Get user info for admin notification
                    user_info = self.user_manager.get_user(user_id)
                    user_display_info = {
                        'name': self.user_manager.get_user_display_name(user_id),
                        'phone': user_info.get('phone_number', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ') if user_info else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'
                    }
                    
                    # Prepare book info for admin notification
                    book_info = {
                        'name': book_name.split(' - ')[0] if ' - ' in book_name else book_name,
                        'author': book_name.split(' - ')[1] if ' - ' in book_name else '–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä',
                        'due_date': book['expiry_date'].strftime('%d.%m.%Y')
                    }
                    
                    # Notify admins about pickup
                    await self.notification_manager.notify_admins_book_picked_up(book_info, user_display_info)
                    
                    logger.info(f"User {user_id} confirmed pickup of book {book_id} ({book_name})")
                    
                    await query.edit_message_text(
                        f"‚úÖ –î—è–∫—É—î–º–æ! –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏:\n\n"
                        f"üìö <b>{book_name}</b>\n"
                        f"üìÖ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ: {book['expiry_date'].strftime('%d.%m.%Y')}\n\n"
                        "–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–Ω–∏–≥—É –≤—á–∞—Å–Ω–æ!",
                        parse_mode='HTML'
                    )
                else:
                    logger.error(f"Could not find book {book_id} in Google Sheets for pickup confirmation")
                    await query.edit_message_text(
                        f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏:\n\n"
                        f"üìö <b>{book_name}</b>\n"
                        f"üìÖ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ: {book['expiry_date'].strftime('%d.%m.%Y')}\n\n"
                        "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                        parse_mode='HTML'
                    )
                    
            except Exception as sheets_error:
                logger.error(f"Error updating Google Sheets for pickup: {sheets_error}")
                await query.edit_message_text(
                    f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏:\n\n"
                    f"üìö <b>{book_name}</b>\n"
                    f"üìÖ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ: {book['expiry_date'].strftime('%d.%m.%Y')}\n\n"
                    "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    parse_mode='HTML'
                )
        
        except Exception as e:
            logger.error(f"Error in user pickup confirmation: {e}")
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏.",
                reply_markup=keyboards.get_user_book_actions_keyboard()
            )
    
    async def _handle_user_returned(self, query):
        """Handle user returned book"""
        await query.edit_message_text(
            "üì§ –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏:\n\n"
            "1. –ü–æ–∫–ª–∞–¥—ñ—Ç—å –∫–Ω–∏–≥—É –Ω–∞ –ø–æ–ª–∏—Ü—é\n"
            "2. –ó—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ –∫–Ω–∏–≥–∏ –Ω–∞ –ø–æ–ª–∏—Ü—ñ\n"
            "3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤ —Ü–µ–π —á–∞—Ç\n\n"
            "üì∑ –û—á—ñ–∫—É—é —Ñ–æ—Ç–æ..."
        )
    
    async def _handle_confirm_return(self, query):
        """Handle user book return confirmation"""
        user_id = query.from_user.id
        
        # In the new workflow, we need to:
        # 1. Get the user's active book (for simplicity, assume they have one)
        # 2. Mark it as 'returned' in the sheet (status = 'returned', row stays yellow)
        # 3. Wait for admin confirmation
        
        try:
            active_books = self.user_manager.get_user_active_books(user_id)
            
            if not active_books:
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–∏–≥ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.",
                    reply_markup=keyboards.get_user_book_actions_keyboard()
                )
                return
            
            # For simplicity, handle the first active book
            # In a full implementation, you'd let user choose which book to return
            book = active_books[0]
            
            # This would need to be enhanced to find the book index in the sheet
            # For now, we'll just mark it in the database
            self.user_manager.mark_book_returned(user_id, book['book_id'])
            
            # Get book name for display
            book_name = self._get_book_name_by_id(book['book_id'])
            if not book_name:
                book_name = f"–ö–Ω–∏–≥–∞ ID: {book['book_id']}"
            
            await query.edit_message_text(
                f"‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
                f"üìö {book_name}\n\n"
                "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ —Å–∏—Å—Ç–µ–º—ñ."
            )
        except Exception as e:
            logger.error(f"Error confirming return for user {user_id}: {e}")
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏."
            )
    
    async def _handle_back_to_books(self, query):
        """Handle back to books list"""
        user_id = query.from_user.id
        user_data = self.user_manager.get_user(user_id)
        
        if user_data and 'current_category' in user_data:
            category = user_data['current_category']
            page = user_data.get('current_page', 0)
            
            # Get books for current category and page
            books, total_books = self.sheets_manager.get_books_by_category(category, page)
            books_text = self._format_books_list(books, category, page, total_books)
            total_pages = (total_books + config.BOOKS_PER_PAGE - 1) // config.BOOKS_PER_PAGE
            
            await query.edit_message_text(
                books_text,
                reply_markup=keyboards.get_books_navigation_keyboard(page, total_pages, category, books),
                parse_mode='HTML'
            )
        else:
            # Fallback to categories if no current category
            await query.edit_message_text(
                "üìö –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–Ω–∏–≥:",
                reply_markup=keyboards.get_categories_keyboard()
            )
    
    def _format_books_list(self, books, category, page, total_books):
        """Format books list for display"""
        start_num = page * config.BOOKS_PER_PAGE + 1
        
        text = f"üìö <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {category}\n"
        text += f"üìñ <b>–ö–Ω–∏–≥–∏ {start_num}-{start_num + len(books) - 1} –∑ {total_books}</b>\n\n"
        
        for i, book in enumerate(books, start_num):
            status = "" if book['is_available'] else " (–∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ)"
            text += f"{i}. <b>{book['name']}</b>{status}\n"
            text += f"   üë§ {book['author']}\n"
            text += f"   üìñ {book['edition']}\n\n"
        
        return text
    
    def _get_book_name_by_id(self, book_id):
        """Get book name by book_id from the sheets"""
        try:
            df = self.sheets_manager.read_books()
            if df.empty:
                return None
            
            # Find book by ID
            book_row = df[df[config.EXCEL_COLUMNS['id']].astype(str) == str(book_id)]
            if not book_row.empty:
                row = book_row.iloc[0]
                return f"{row[config.EXCEL_COLUMNS['name']]} - {row[config.EXCEL_COLUMNS['author']]}"
            return None
        except Exception as e:
            logger.error(f"Error getting book name for ID {book_id}: {e}")
            return None
    
    def run(self):
        """Start the bot"""
        logger.info("Starting Library Bot...")
        self.application.run_polling()

if __name__ == "__main__":
    try:
        bot = LibraryBot()
        bot.run()
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        print("‚ùå Bot failed to start. Please check your Google Sheets configuration.")
        print("Run 'python setup_google_sheets.py' to validate your setup.")
        exit(1) 