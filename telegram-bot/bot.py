import logging
import asyncio
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

import config
from google_sheets_manager import GoogleSheetsManager
from user_manager import UserManager
from notifications import NotificationManager
import keyboards

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class LibraryBot:
    def __init__(self):
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        try:
            self.sheets_manager = GoogleSheetsManager()
        except Exception as e:
            logger.error(f"Failed to initialize Google Sheets: {e}")
            raise
        
        self.user_manager = UserManager()
        self.notification_manager = NotificationManager(self.application.bot)
        
        # Register handlers
        self._register_handlers()
    
    def _register_handlers(self):
        """Register all command and callback handlers"""
        # Commands
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # Contact handler for phone number
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
        
        # Photo handler for book returns
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # Callback handlers
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user_id = update.effective_user.id
        
        if self.user_manager.is_user_registered(user_id):
            # User is registered, show main menu
            is_admin = str(user_id) in config.ADMIN_IDS
            await update.message.reply_text(
                "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
                reply_markup=keyboards.get_main_menu_keyboard(is_admin)
            )
        else:
            # Request registration
            await update.message.reply_text(
                "üëã –í—ñ—Ç–∞—î–º–æ –≤ –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ!\n\n"
                "–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
                reply_markup=keyboards.get_phone_keyboard()
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = (
            "üìö <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏</b>\n\n"
            "üîπ /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "üîπ /help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
            "<b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>\n"
            "1. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–Ω–∏–≥\n"
            "2. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
            "3. –ó–∞–±—Ä–æ–Ω—é–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–Ω–∏–≥—É\n"
            "4. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–æ–ª–∏—Ü—é\n"
            "5. –ó–∞–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤ –±–æ—Ç—ñ\n"
            "6. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –∫–Ω–∏–≥—É –≤—á–∞—Å–Ω–æ\n\n"
            "‚ùì –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"
        )
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle contact sharing for registration"""
        contact = update.message.contact
        user_id = update.effective_user.id
        
        # Register user
        self.user_manager.register_user(
            user_id=user_id,
            phone_number=contact.phone_number,
            first_name=contact.first_name,
            last_name=contact.last_name
        )
        
        # Show main menu
        is_admin = str(user_id) in config.ADMIN_IDS
        await update.message.reply_text(
            "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=keyboards.get_main_menu_keyboard(is_admin)
        )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle photo for book return"""
        user_id = update.effective_user.id
        
        if not self.user_manager.is_user_registered(user_id):
            await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start")
            return
        
        # Store photo for book return (this would be enhanced to track which book is being returned)
        photo = update.message.photo[-1]  # Get highest resolution
        
        # For now, just acknowledge receipt
        await update.message.reply_text(
            "üì∑ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ! –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –±—É–¥—É—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ –ø—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏.",
            reply_markup=keyboards.get_return_confirmation_keyboard()
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle all callback queries"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        # Check registration for non-admin callbacks
        if not data.startswith('admin_') and not self.user_manager.is_user_registered(user_id):
            await query.edit_message_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start")
            return
        
        try:
            # Route callbacks
            if data == "browse_books":
                await self._handle_browse_books(query)
            elif data == "my_books":
                await self._handle_my_books(query)
            elif data == "back_to_main":
                await self._handle_back_to_main(query)
            elif data.startswith("category_"):
                await self._handle_category_selection(query, data)
            elif data.startswith("nav_"):
                await self._handle_navigation(query, data)
            elif data.startswith("book_select_"):
                await self._handle_book_selection(query, data)
            elif data.startswith("book_info_"):
                await self._handle_book_info(query, data)
            elif data.startswith("confirm_book_"):
                await self._handle_book_confirmation(query, data)
            elif data.startswith("admin_"):
                await self._handle_admin_callbacks(query, data)
            elif data == "user_picked_up":
                await self._handle_user_picked_up(query)
            elif data == "user_returned":
                await self._handle_user_returned(query)
            elif data == "confirm_return":
                await self._handle_confirm_return(query)
            elif data == "back_to_books":
                await self._handle_back_to_books(query)
        except Exception as e:
            logger.error(f"Error handling callback {data}: {e}")
            await query.edit_message_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. "
                "–ú–æ–∂–ª–∏–≤–æ, –ø—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ Google Sheets. "
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    
    async def _handle_browse_books(self, query):
        """Handle browse books callback"""
        await query.edit_message_text(
            "üìö –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–Ω–∏–≥:",
            reply_markup=keyboards.get_categories_keyboard()
        )
    
    async def _handle_my_books(self, query):
        """Handle my books callback"""
        user_id = query.from_user.id
        # This would show user's current books
        await query.edit_message_text(
            "üìñ –í–∞—à—ñ –∫–Ω–∏–≥–∏:\n\n"
            "–¢—É—Ç –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –≤–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∫–Ω–∏–≥–∏...",
            reply_markup=keyboards.get_user_book_actions_keyboard()
        )
    
    async def _handle_back_to_main(self, query):
        """Handle back to main menu"""
        user_id = query.from_user.id
        is_admin = str(user_id) in config.ADMIN_IDS
        
        await query.edit_message_text(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            reply_markup=keyboards.get_main_menu_keyboard(is_admin)
        )
    
    async def _handle_category_selection(self, query, data):
        """Handle category selection"""
        category = data.replace("category_", "")
        user_id = query.from_user.id
        
        # Update user's current category
        self.user_manager.update_user_category(user_id, category)
        
        # Get books for this category
        books, total_books = self.sheets_manager.get_books_by_category(category, page=0)
        
        if not books:
            await query.edit_message_text(
                f"üìö –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n\n"
                "–ö–Ω–∏–≥ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î.",
                reply_markup=keyboards.get_categories_keyboard()
            )
            return
        
        # Format books list
        books_text = self._format_books_list(books, category, 0, total_books)
        total_pages = (total_books + config.BOOKS_PER_PAGE - 1) // config.BOOKS_PER_PAGE
        
        await query.edit_message_text(
            books_text,
            reply_markup=keyboards.get_books_navigation_keyboard(0, total_pages, category, books),
            parse_mode='HTML'
        )
    
    async def _handle_navigation(self, query, data):
        """Handle pagination navigation"""
        parts = data.split("_")
        direction = parts[1]  # prev or next
        category = parts[2]
        page = int(parts[3])
        
        user_id = query.from_user.id
        self.user_manager.update_user_page(user_id, page)
        
        books, total_books = self.sheets_manager.get_books_by_category(category, page)
        books_text = self._format_books_list(books, category, page, total_books)
        total_pages = (total_books + config.BOOKS_PER_PAGE - 1) // config.BOOKS_PER_PAGE
        
        await query.edit_message_text(
            books_text,
            reply_markup=keyboards.get_books_navigation_keyboard(page, total_pages, category, books),
            parse_mode='HTML'
        )
    
    async def _handle_book_selection(self, query, data):
        """Handle book selection for booking"""
        book_index = int(data.replace("book_select_", ""))
        book = self.sheets_manager.get_book_by_index(book_index)
        
        if not book:
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if not book['is_available']:
            await query.edit_message_text("‚ùå –¶—è –∫–Ω–∏–≥–∞ –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞.")
            return
        
        # Show booking confirmation
        book_text = (
            f"üìö <b>{book['name']}</b>\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book['author']}\n"
            f"üìñ <b>–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ:</b> {book['edition']}\n\n"
            "–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Ü—é –∫–Ω–∏–≥—É?\n\n"
            "‚ö†Ô∏è –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–Ω–∏–≥–∞ –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∏—Ü—é –ø—Ä–æ—Ç—è–≥–æ–º 1-2 –¥–Ω—ñ–≤."
        )
        
        await query.edit_message_text(
            book_text,
            reply_markup=keyboards.get_booking_confirmation_keyboard(book_index),
            parse_mode='HTML'
        )
    
    async def _handle_book_info(self, query, data):
        """Handle book info request"""
        book_index = int(data.replace("book_info_", ""))
        book = self.sheets_manager.get_book_by_index(book_index)
        
        if not book:
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if book['is_available'] else "‚ùå –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞"
        
        book_text = (
            f"üìö <b>{book['name']}</b>\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book['author']}\n"
            f"üìñ <b>–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ:</b> {book['edition']}\n"
            f"üìÑ <b>–°—Ç–æ—Ä—ñ–Ω–æ–∫:</b> {book['pages']}\n"
            f"üìã <b>–û–ø–∏—Å:</b> {book['description']}\n"
            f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b> {book['categories']}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
        )
        
        await query.edit_message_text(
            book_text,
            reply_markup=keyboards.get_book_actions_keyboard(book_index, book['is_available']),
            parse_mode='HTML'
        )
    
    async def _handle_book_confirmation(self, query, data):
        """Handle book booking confirmation"""
        book_index = int(data.replace("confirm_book_", ""))
        user_id = query.from_user.id
        
        # Get book and user info
        book = self.sheets_manager.get_book_by_index(book_index)
        user = self.user_manager.get_user(user_id)
        
        if not book or not book['is_available']:
            await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
            return
        
        # Book the item
        user_name = self.user_manager.get_user_display_name(user_id)
        try:
            self.sheets_manager.book_item(book_index, user_id, user_name)
            
            # Add to user history
            self.user_manager.add_book_to_history(user_id, book_index, "booked")
            
            # Send notifications to admins - get user info safely
            book_info = {
                'name': book['name'],
                'author': book['author'],
                'edition': book['edition']
            }
            
            # Get phone number safely
            phone_number = "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
            if user and 'phone_number' in user:
                phone_number = user['phone_number']
            
            user_info = {
                'name': user_name,
                'phone': phone_number
            }
            
            await self.notification_manager.notify_admins_book_requested(book_info, user_info)
            
            # Send rules to user
            await self.notification_manager.send_rules_to_user(user_id)
            
            logger.info(f"Book {book_index} successfully booked by user {user_id} ({user_name}), admin notifications sent")
            
            await query.edit_message_text(
                f"‚úÖ –ö–Ω–∏–≥–∞ '{book['name']}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞!\n\n"
                "üìã –ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n"
                "üì¶ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É.\n"
                "‚è∞ –û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∫–Ω–∏–≥–∏ (1-2 –¥–Ω—ñ)."
            )
        except Exception as e:
            logger.error(f"Failed to book item: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ –∫–Ω–∏–≥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    async def _handle_admin_callbacks(self, query, data):
        """Handle admin panel callbacks"""
        user_id = query.from_user.id
        
        if str(user_id) not in config.ADMIN_IDS:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        try:
            if data == "admin_panel":
                await query.edit_message_text(
                    "üîß –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å",
                    reply_markup=keyboards.get_admin_panel_keyboard()
                )
            elif data == "admin_delivery_queue":
                books = self.sheets_manager.get_books_for_delivery()
                logger.info(f"Admin {user_id} requested delivery queue, found {len(books)} books")
                
                if books:
                    await query.edit_message_text(
                        f"üì¶ –ö–Ω–∏–≥–∏ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏ ({len(books)}):",
                        reply_markup=keyboards.get_delivery_books_keyboard(books)
                    )
                else:
                    # Show debug information if no books are found
                    try:
                        # Try to read all books and see how many have in_queue_for_delivery = 'yes'
                        df = self.sheets_manager.read_books()
                        if not df.empty:
                            total_books = len(df)
                            in_queue_count = len(df[df[config.EXCEL_COLUMNS['in_queue_for_delivery']].astype(str).str.lower() == 'yes'])
                            debug_text = (
                                f"üì¶ –ù–µ–º–∞—î –∫–Ω–∏–≥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
                                f"üîç –í—ñ–¥–ª–∞–¥–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n"
                                f"–í—Å—å–æ–≥–æ –∫–Ω–∏–≥ –≤ —Ç–∞–±–ª–∏—Ü—ñ: {total_books}\n"
                                f"–ö–Ω–∏–≥ –∑ 'In queue for delivery' = 'yes': {in_queue_count}\n\n"
                                f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î –∫–Ω–∏–≥–∏ –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é 'yes' –≤ –∫–æ–ª–æ–Ω—Ü—ñ 'In queue for delivery'"
                            )
                        else:
                            debug_text = "üì¶ –ù–µ–º–∞—î –∫–Ω–∏–≥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ"
                    except Exception as debug_e:
                        logger.error(f"Debug info error: {debug_e}")
                        debug_text = f"üì¶ –ù–µ–º–∞—î –∫–Ω–∏–≥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏\n\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ª–∞–¥–æ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {debug_e}"
                    
                    await query.edit_message_text(
                        debug_text,
                        reply_markup=keyboards.get_admin_panel_keyboard()
                    )
            elif data.startswith("admin_deliver_"):
                book_index = int(data.replace("admin_deliver_", ""))
                book = self.sheets_manager.get_book_by_index(book_index)
                if book:
                    await query.edit_message_text(
                        f"üìö {book['name']}\nüë§ {book['author']}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –ø–æ–ª–∏—Ü—é?",
                        reply_markup=keyboards.get_admin_delivery_actions_keyboard(book_index)
                    )
            elif data.startswith("admin_delivered_"):
                book_index = int(data.replace("admin_delivered_", ""))
                try:
                    self.sheets_manager.mark_as_delivered(book_index)
                    book = self.sheets_manager.get_book_by_index(book_index)
                    # Here we would notify the user who booked the book
                    await query.edit_message_text("‚úÖ –ö–Ω–∏–≥–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∏—Ü—é!")
                except Exception as e:
                    logger.error(f"Failed to mark book as delivered: {e}")
                    await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –∫–Ω–∏–≥–∏ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ—ó.")
        except Exception as e:
            logger.error(f"Error in admin callback {data}: {e}")
            await query.edit_message_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ Google Sheets. "
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
    
    async def _handle_user_picked_up(self, query):
        """Handle user picked up book"""
        user_id = query.from_user.id
        # This would be enhanced to track which specific book was picked up
        await query.edit_message_text(
            "‚úÖ –î—è–∫—É—î–º–æ! –ö–Ω–∏–≥–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –∑–∞–±—Ä–∞–Ω–∞.\n"
            "üìÖ –ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —ó—ó –≤—á–∞—Å–Ω–æ!"
        )
    
    async def _handle_user_returned(self, query):
        """Handle user returned book"""
        await query.edit_message_text(
            "üì§ –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏:\n\n"
            "1. –ü–æ–∫–ª–∞–¥—ñ—Ç—å –∫–Ω–∏–≥—É –Ω–∞ –ø–æ–ª–∏—Ü—é\n"
            "2. –ó—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ –∫–Ω–∏–≥–∏ –Ω–∞ –ø–æ–ª–∏—Ü—ñ\n"
            "3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤ —Ü–µ–π —á–∞—Ç\n\n"
            "üì∑ –û—á—ñ–∫—É—é —Ñ–æ—Ç–æ..."
        )
    
    async def _handle_confirm_return(self, query):
        """Handle confirm book return"""
        await query.edit_message_text(
            "‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n"
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞–±—Ä–∞—Ç–∏ –∫–Ω–∏–≥—É."
        )
    
    async def _handle_back_to_books(self, query):
        """Handle back to books list"""
        user_id = query.from_user.id
        user_data = self.user_manager.get_user(user_id)
        
        if user_data and 'current_category' in user_data:
            category = user_data['current_category']
            page = user_data.get('current_page', 0)
            
            # Get books for current category and page
            books, total_books = self.sheets_manager.get_books_by_category(category, page)
            books_text = self._format_books_list(books, category, page, total_books)
            total_pages = (total_books + config.BOOKS_PER_PAGE - 1) // config.BOOKS_PER_PAGE
            
            await query.edit_message_text(
                books_text,
                reply_markup=keyboards.get_books_navigation_keyboard(page, total_pages, category, books),
                parse_mode='HTML'
            )
        else:
            # Fallback to categories if no current category
            await query.edit_message_text(
                "üìö –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–Ω–∏–≥:",
                reply_markup=keyboards.get_categories_keyboard()
            )
    
    def _format_books_list(self, books, category, page, total_books):
        """Format books list for display"""
        start_num = page * config.BOOKS_PER_PAGE + 1
        
        text = f"üìö <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {category}\n"
        text += f"üìñ <b>–ö–Ω–∏–≥–∏ {start_num}-{start_num + len(books) - 1} –∑ {total_books}</b>\n\n"
        
        for i, book in enumerate(books, start_num):
            status = "" if book['is_available'] else " (–∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ)"
            text += f"{i}. <b>{book['name']}</b>{status}\n"
            text += f"   üë§ {book['author']}\n"
            text += f"   üìñ {book['edition']}\n\n"
        
        return text
    
    def run(self):
        """Start the bot"""
        logger.info("Starting Library Bot...")
        self.application.run_polling()

if __name__ == "__main__":
    try:
        bot = LibraryBot()
        bot.run()
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        print("‚ùå Bot failed to start. Please check your Google Sheets configuration.")
        print("Run 'python setup_google_sheets.py' to validate your setup.")
        exit(1) 